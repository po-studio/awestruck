version: '3.8'

# why we use host networking for local development:
# - enables direct access to host network interfaces
# - simplifies NAT traversal testing
# - allows proper ICE candidate generation

# why we need to set host ip automatically:
# - ensures consistent network configuration
# - handles different network interfaces
# - works across different development machines
x-host-ip: &host_ip
  ${HOST_IP:-$(./scripts/get_host_ip.sh)}

services:
  # why we need a webrtc service:
  # - handles audio synthesis and streaming
  # - manages webrtc connections
  # - provides api endpoints
  webrtc-server:
    platform: linux/arm64
    build:
      context: .
      dockerfile: Dockerfile
      platforms:
        - linux/arm64
    # why we need host networking:
    # - enables direct access to network interfaces
    # - required for proper ice candidate generation
    # - simplifies nat traversal in development
    network_mode: host
    volumes:
      - /tmp/.X11-unix:/tmp/.X11-unix
      - ./client:/app/client
      - ./supercollider/src:/app/supercollider/src
      - ./supercollider/synthdefs:/app/supercollider/synthdefs
    shm_size: 1g
    security_opt:
      - seccomp:unconfined
    ulimits:
      memlock:
        soft: -1
        hard: -1
      stack:
        soft: 67108864
        hard: 67108864
      rtprio: 99
    # why we need webrtc server configuration:
    # - handles audio synthesis and streaming
    # - manages webrtc connections
    # - communicates with turn server
    environment:
      - AWESTRUCK_ENV=development
      - JACK_NO_AUDIO_RESERVATION=1
      - JACK_PORT_MAX=128
      - GST_DEBUG=2
      - XDG_RUNTIME_DIR=/tmp/runtime-appuser
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - AWESTRUCK_API_KEY=${AWESTRUCK_API_KEY}
      - GST_BUFFER_SIZE=4194304
      # why we need optimized jack settings:
      # - reduces audio xruns
      # - improves real-time performance
      # - balances latency and stability
      - JACK_PERIOD_SIZE=1024
      - JACK_PERIODS=2
      - JACK_PRIORITY=95
      - JACK_REALTIME_PRIORITY=95
      - JACK_TIMEOUT=2000
      - JACK_BUFFER_SIZE=2048
      # why we need host ip for turn server:
      # - enables proper nat traversal
      # - simulates production environment
      # - allows relay candidates to work
      - TURN_SERVER=${HOST_IP:-$(./scripts/get_host_ip.sh)}
    ports:
      # why we need these ports:
      # - web/api traffic only
      # - webrtc uses dynamic ports
      # - media relay handled by turn server
      - 8080:8080
    # networks:
    #   awestruck-net:
    #     aliases:
    #       - webrtc-server
    depends_on:
      turn-server:
        condition: service_healthy

  # why we need a turn service:
  # - provides both stun and turn functionality
  # - enables nat traversal for webrtc
  # - improves connection reliability
  turn-server:
    build:
      context: .
      dockerfile: Dockerfile.turn
    platform: linux/arm64
    # why we need host networking:
    # - enables direct access to network interfaces
    # - required for proper ice candidate generation
    # - simplifies nat traversal in development
    network_mode: host
    ports:
      # why we need these ports:
      # - stun/turn signaling (3478/udp)
      # - health checks (3479/tcp)
      # - dynamic ports for media relay
      - 3478:3478/udp
      - 3479:3479/tcp
      # why we need port range exposure:
      # - allows dynamic port allocation
      # - enables concurrent connections
      # - handled by pion/turn library
      - "49152-49252:49152-49252/udp"
    environment:
      - AWESTRUCK_ENV=development
      - TURN_USERNAME=user
      - TURN_PASSWORD=pass
      # why we need host ip for realm:
      # - matches real network topology
      # - enables proper ice candidate generation
      # - required for webrtc connectivity
      - TURN_REALM=${HOST_IP:-$(./scripts/get_host_ip.sh)}
      - EXTERNAL_IP=${HOST_IP:-$(./scripts/get_host_ip.sh)}
      # why we need port configuration:
      # - ensures consistent port usage
      # - matches webrtc settings
      # - enables proper routing
      - SIGNALING_PORT=3478
      - HEALTH_PORT=3479
    volumes:
      - ./turn:/app/turn
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3479/health"]
      interval: 5s
      timeout: 3s
      retries: 5
      start_period: 1s

# why we need a custom network:
# - simulates aws vpc
# - enables service discovery
# - tests container isolation
# networks:
#   awestruck-net:
#     driver: bridge
#     # why we need these options:
#     # - enables proper dns resolution
#     # - allows container name lookups
#     # - simulates aws vpc dns
#     driver_opts:
#       com.docker.network.bridge.enable_icc: "true"
#       com.docker.network.bridge.enable_ip_masquerade: "true"
#       com.docker.network.bridge.host_binding_ipv4: "0.0.0.0"